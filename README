UV Navigator - Auswertungsvisualisierung fuer Universum V
Copyright (C) 2004 Daniel Roethlisberger <roe@chronator.ch>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, see http://www.gnu.org/copyleft/

$Id$



Allgemeines
-----------

UV Navigator ist ein weiteres Tool für Universum V.  ToVU passte
mir aus technischen Gründen nicht so wirklich, und AMAP / PoN
laufen nur unter Windows und sind nicht Open Source.  Ergo musste
was richtiges her, und das hier ist das vorläufige Resultat.  Ich
habe UVNav primär für mich selber entwickelt, und momentan gibt
UVNav wohl auch noch nicht genug Features her, um AMAP, PoN und
ToVU zu konkurrenzieren.  Trotzdem ist UVNav öffentlich.  Ihr seid
eingeladen, auch selber an UVNav Verbesserungen anzubringen, und
mir die in Form von Unified Diffs (diff -ruN) zu schicken.

UV Navigator ist Open Source.  Aktuelle Version und Source Code
gibts auf den Projektseiten:

  https://projects.roe.ch/trac/uvnav/

UV Navigator benutzt eine interne, stark reduzierte Version der
genialen Library Perl Compatible Regular Expressions (PCRE) von
Philip Hazel, Copyright (C) University of Cambridge, England.

Details zu diesem und anderem verwendetem Fremdcode siehe die Datei
AUTHORS.



Stand der Entwicklung
---------------------

UV Navigator befindet sich in der Frühphase der Entwicklung.

Der Parser ist mittlerwile stabil und kann die allermeisten
Auswertungen korrekt einlesen, inklusive alte und uralte
Auswertungen (getestet wurden derzeit Sternzeit 55, 128,
144-152, 154-162, 211-218).
Was hier noch fehlt ist das Parsen der Nachrichten, speziell
der Resultate von Zonendaten-Abfragen.

Imperatoren-Spielzeug wird zwar korrekt verarbeitet, aber noch
grösstenteils ignoriert.  Für Imperatoren gibt UVNav demnach
noch nicht viel her.

Die Kartendarstellung ist noch sehr experimentell.  Grafik und
Benutzerführung stecken noch in den Kinderschuhen.  Viele
Verbesserungen sind vorbereitet, aber noch nicht fertig
implementiert.  Performance und Benutzbarkeit sind noch weit
vom Ziel entfernt!

Diverse Hilfsmodule für Konfiguration, Image-Caching, Font-
Renderer, Zeichenhilfen etc sind stabil und funktionieren
zuverlässig.  Was da noch fehlt ist ein Datenbankmodul für
die Ablage von persistenten Daten.  Momentan kann daher auch
nur eine Auswertung aufs Mal eingelesen und angeschaut werden.

Fazit: Momentan noch nicht für produktive Arbeiten geeignet!



Bekannte Probleme
-----------------

Bei vielen Objekten in der Darstellung ist die momentane
Methode des herauszoomens zu langsam. Objekte sollen sich zu
Gruppen oder farbigen Flächen formieren sobald sie eh zu klein
sind um einzeln erkannt zu werden. Das bedingt eine baumartige
Strukturierung dieser Objekte, und ist daher nicht ganz einfach
zu implementieren.

Die Karte wird bei vielen Objekten sehr unübersichtlich.
Die momentane Art, wie Planeten und Schiffe dargestellt werden,
muss gründlich überarbeitet werden.

Hardware-Surfaces funktionieren nicht.



Performance
-----------

Grosse Auswertungen verlangen etwas Rechenpower und Speicher (RAM).

Der Parser fuer Textauswertungen verarbeitet auf meiner 2 GHz
Workstation 2-3 MB/s, auf meinem alten 700 MHz Thinkpad 700-800 KB/s,
je nach Komplexität der Auswertungsdaten.

Zum Vergleich:  ToVU 4.13 ist ca um einen Faktor von 20 langsamer,
AMAP 3.9 schleicht sogar ca 200 mal langsamer als UVNav dahin.

Die Anzeige ist sogar auf meinem Thinkpad mit grossen Auswertungen
noch einigermassen flüssig.  Notfalls kann man das rechenintensive
Anti-Aliasing und die Interpolation im Zoom-Code mit -Q deaktivieren,
muss dafür aber mit hässlich verpixelter Anzeige leben.  Wie bei PoN,
AMAP und ToVU halt :)

UVNav frisst ca 10 MB Grundbedarf plus das 3-4fache der Dateigrösse der
Auswertung an RAM.  Da lässt sich vermutlich nur wenig daran ändern;
tendenziell wird der Speicherbedarf eher steigen als sinken, da mir
gute Performance wichtiger ist als ein niedriger Speicherbedarf.



Hardware Surfaces / Grafikbeschleunigung
----------------------------------------

SDL kann die Grafikbeschleunigung einiger Karten nutzen.  Dies ist
jedoch momentan von UV Navigator noch nicht sauber unterstützt.

Unter Unix muss dazu UV Navigator mit root-Rechten gestartet werden,
und die Env-Var SDL_VIDEODRIVER auf "dga" gesetzt werden.  Falls ein
beschleunigter DGA-Driver zu Verfügung steht, kann dann uvnav mit -S
gestartet werden, z.B. so:

 $ SDL_VIDEODRIVER=dga sudo uvnav -S /pfad/zu/auswertung.txt

Unter Windows können Hardware-Surfaces nur im Vollbildmodus
genutzt werden.

ACHTUNG: DIES IST MOMENTAN NOCH SEHR EXPERIMENTELL UND NICHT RICHTIG
         UNTERSTUETZT.  AUSPROBIEREN AUF EIGENE GEFAHR.
         Bei mir funktionierts jedenfalls momentan nicht sauber :)



Kompilieren und Installieren
----------------------------

UVNav wird mit GCC 3.3.x und den C/C++-Libs von FreeBSD entwickelt,
sollte aber auch mit anderen Compilern und Libs kompilieren.
Probleme in diesem Zusammenhang bitte melden; es ist gut möglich,
dass es noch kleine Veränderungen an configure.ac und den relevanten
Header-Files braucht, um andere Systeme zu unterstützen.

Folgende Bibliotheken werden benötigt:
 - SDL        Simple Directmedia Layer
              http://www.libsdl.org/
 - SDL_ttf    TrueType Font Library für SDL
              http://www.libsdl.org/projects/SDL_ttf/
 - SDL_image  Image Loading Library für SDL
              http://www.libsdl.org/projects/SDL_image/
 - SDL_gfx    Erweiterte Grafiklibrary für SDL
              http://www.ferzkopp.net/~aschiffler/Software/SDL_gfx-2.0/

UVNav kann auf allem was sich POSIX-kompatibel schimpft mit der
üblichen ``magischen Dreifaltigkeit'' kompiliert und installiert
werden:

 $ ./configure
 $ make
 # make install

Auf nicht-GNU-Systemen (z.B. BSD, Solaris, MacOS X) muss ziemlich
sicher `gmake' (GNU Make) statt `make' verwendet werden.



Kompilieren und Installieren ab Subversion Repository
-----------------------------------------------------

Um UVNav direkt ab Repository zu kompilieren, wird ein Subversion
Client sowie zusätzlich GNU Autoconf 2.59 und Automake 1.8 benötigt
(2.57 und 1.7 sollten auch funktionieren, alles was älter ist aber
nicht).

Um den Quellcode der aktuellsten Entwicklungs-Version zu ziehen:

 $ svn checkout svn://projects.roe.ch/repos/uvnav/trunk/ uvnav
 $ cd uvnav
 $ ./autogen.sh
 $ ./configure
 $ make
 # make install

Auf nicht-GNU-Systemen (z.B. BSD, Solaris, MacOS X) muss ziemlich
sicher `gmake' (GNU Make) statt `make' verwendet werden.



Kompilieren mit MinGW32 Cross-Compiler
--------------------------------------

UVNav kann direkt unter Linux oder BSD für Windows kompiliert werden.
Es wird eine MinGW32/GCC-Installation benötigt.

Die benötigten DLLs stehen bereits vorkompiliert zu Verfügung, aber
die eigentlichen SDL-Bibliotheken müssen zum Kompilieren in der
MinGW32-Umgebung vorhanden sein.

Um einen Cross-Compiler-Build ab Subversion Repo zu starten:

 $ svn checkout svn://projects.roe.ch/repos/uvnav/trunk/ uvnav
 $ cd uvnav
 $ aux/build-cross-mingw32.sh
 $ aux/make-binary-dist.sh

Vorher sollte build-cross-mingw32.sh noch an die lokalen Gegebenheiten
angepasst werden.  Der Default passt für eine FreeBSD Installation der
devel/mingw32-* Ports (GCC 3.x).


